"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var httpie_1 = require("httpie");
var config_1 = require("./config");
var TOKEN_STORAGE = "colyseus-auth-token";
var Platform;
(function (Platform) {
    Platform["ios"] = "ios";
    Platform["android"] = "android";
})(Platform = exports.Platform || (exports.Platform = {}));
var Auth = /** @class */ (function () {
    function Auth() {
    }
    Auth.prototype.checkToken = function () {
        if (!this.token) {
            throw new Error("missing token. need to login first.");
        }
    };
    Object.defineProperty(Auth, "current", {
        get: function () {
            if (!this._current) {
                this._current = new Auth();
                this._current.token = localStorage.getItem(TOKEN_STORAGE);
            }
            return this._current;
        },
        enumerable: true,
        configurable: true
    });
    Auth.login = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, (new Auth()).login(options)];
            });
        });
    };
    Auth.prototype.login = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var queryParams, name_1, response, data, attr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        queryParams = [];
                        for (name_1 in options) {
                            queryParams.push(name_1 + "=" + options[name_1]);
                        }
                        if (this.token) {
                            queryParams.push("token=" + this.token);
                        }
                        return [4 /*yield*/, httpie_1.post(config_1.getEndpoint() + "/login?" + queryParams.join("&"), {
                                headers: { 'Accept': 'application/json' }
                            })];
                    case 1:
                        response = _a.sent();
                        data = response.data;
                        for (attr in data) {
                            if (this.hasOwnProperty(attr)) {
                                this[attr] = data[attr];
                            }
                        }
                        return [2 /*return*/, this];
                }
            });
        });
    };
    Auth.prototype.getFriends = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.checkToken();
                        return [4 /*yield*/, httpie_1.get(config_1.getEndpoint() + "/friends", {
                                headers: { 'Accept': 'application/json', 'Authorization': 'Bearer ' + this.token }
                            })];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            });
        });
    };
    Auth.prototype.getOnlineFriends = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.checkToken();
                        return [4 /*yield*/, httpie_1.get(config_1.getEndpoint() + "/online_friends", {
                                headers: { 'Accept': 'application/json', 'Authorization': 'Bearer ' + this.token }
                            })];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            });
        });
    };
    Auth.prototype.getFriendRequests = function (friendId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.checkToken();
                        return [4 /*yield*/, httpie_1.get(config_1.getEndpoint() + "/friend_requests", {
                                headers: {
                                    'Accept': 'application/json',
                                    'Authorization': 'Bearer ' + this.token
                                }
                            })];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            });
        });
    };
    Auth.prototype.sendFriendRequest = function (friendId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.checkToken();
                        return [4 /*yield*/, httpie_1.post(config_1.getEndpoint() + "/friend_requests?userId=" + friendId, {
                                headers: {
                                    'Accept': 'application/json',
                                    'Authorization': 'Bearer ' + this.token
                                }
                            })];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            });
        });
    };
    Auth.prototype.acceptFriendRequest = function (friendId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.checkToken();
                        return [4 /*yield*/, httpie_1.put(config_1.getEndpoint() + "/friend_requests?userId=" + friendId, {
                                headers: {
                                    'Accept': 'application/json',
                                    'Authorization': 'Bearer ' + this.token
                                }
                            })];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            });
        });
    };
    Auth.prototype.declineFriendRequest = function (friendId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.checkToken();
                        return [4 /*yield*/, httpie_1.del(config_1.getEndpoint() + "/friend_requests?userId=" + friendId, {
                                headers: {
                                    'Accept': 'application/json',
                                    'Authorization': 'Bearer ' + this.token
                                }
                            })];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            });
        });
    };
    Auth.prototype.blockUser = function (friendId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.checkToken();
                        return [4 /*yield*/, httpie_1.post(config_1.getEndpoint() + "/block?userId=" + friendId, {
                                headers: {
                                    'Accept': 'application/json',
                                    'Authorization': 'Bearer ' + this.token
                                }
                            })];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            });
        });
    };
    Auth.prototype.unblockUser = function (friendId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.checkToken();
                        return [4 /*yield*/, httpie_1.put(config_1.getEndpoint() + "/block?userId=" + friendId, {
                                headers: {
                                    'Accept': 'application/json',
                                    'Authorization': 'Bearer ' + this.token
                                }
                            })];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            });
        });
    };
    Auth.prototype.logout = function () {
        this.token = undefined;
    };
    return Auth;
}());
exports.Auth = Auth;
